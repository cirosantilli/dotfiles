#!/usr/bin/env bash

set -ex

doc='
    wget -O- https://raw.githubusercontent.com/cirosantilli/dotfiles/master/home/bin/setup-ubuntu | bash

Minimal CLI setup:

    wget -O- https://raw.githubusercontent.com/cirosantilli/dotfiles/master/home/bin/setup-ubuntu | bash /dev/stdin -g
'

full=false
gui=true
full=false
setup_home_partition=true
while getopts fgh OPT; do
  case "$OPT" in
    f)
      full=true
      ;;
    g)
      gui=false
      ;;
    h)
      setup_home_partition=false
      ;;
    \?)
      exit 2
      ;;
  esac
done

sudo apt-get update
sudo apt-get install -y aptitude
sudo aptitude update
sudo add-apt-repository "deb http://archive.ubuntu.com/ubuntu $(lsb_release -sc) main universe restricted multiverse"
sudo add-apt-repository "deb http://archive.canonical.com/ubuntu $(lsb_release -sc) partner"

pkgs="\
cscope \
curl \
expect \
exuberant-ctags \
git \
tmux \
vim \
"

if $gui; then
  pkgs="$pkgs \
acpi \
apt-file \
apt-rdepends \
ppa-purge \
"

  # Usefull stuff that does not come by default or Canonical would have to pay royalties.
  # MANUAL accept ncurses confirmation
  pkgs="$pkgs ubuntu-restricted-extras"

  # Browser
  pkgs="$pkgs chromium-browser"
  # 14.04
  pkgs="$pkgs flashplugin-installer"

  # X utils
  pkgs="$pkgs wmctrl xbacklight xsel"

  # 17.04
  # https://askubuntu.com/questions/829592/how-can-i-stop-gvim-from-crashing-when-opening-a-file/904727#904727
  # http://askubuntu.com/questions/33260/difference-between-vim-gtk-and-vim-gnome
  #pkgs="$pkgs vim-gtk"
  #" < 17.04
  pkgs="$pkgs vim-gnome"

  # LXCE does not have a toolbar.
  # https://askubuntu.com/questions/69556/how-to-check-battery-status-using-terminal
  pkgs="$pkgs acpi"

  # Google talk.
  wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
  sudo sh -c 'echo "deb http://dl.google.com/linux/talkplugin/deb/ stable main" >> /etc/apt/sources.list.d/google.list'
  pkgs="$pkgs google-talkplugin"

  # chinese-input
  pkgs="$pkgs ibus-pinyin"

  if $full; then
    pkgs="$pkgs net-tools vlc"

    # python
    pkgs="$pkgs python-pip"

    # java
    pkgs="$pkgs openjdk-8-dbg openjdk-8-jdk"
  fi
fi

sudo aptitude install -y $pkgs

# sudo without password.
sudo sh -c "echo '$(id -un) ALL=(ALL) NOPASSWD: ALL' >> /etc/sudoers"

# TTY without sudo
# https://askubuntu.com/questions/133235/how-do-i-allow-non-root-access-to-ttyusb0-on-12-04
sudo usermod -a -G dialout "$USER"

# Quick OS system choice and show kernel messages:
printf 'GRUB_TIMEOUT=1\nGRUB_CMDLINE_LINUX_DEFAULT=""\n' | sudo tee -a /etc/default/grub
sudo update-grub

if $setup_home_partition; then
  # Git
  mkdir ~/bin
  cd ~/bin
  curl -O https://raw.github.com/git/git/master/contrib/diff-highlight/diff-highlight
  chmod +x diff-highlight
  ssh-keygen -b 4096 -C "ciro.santilli@gmail.com" -f "$HOME/.ssh/id_rsa" -t rsa -P ''

  # Dotfiles
  git clone git://github.com/andsens/homeshick.git $HOME/.homesick/repos/homeshick
  . "$HOME/.homesick/repos/homeshick/homeshick.sh"
  yes | homeshick clone cirosantilli/dotfiles

  # Vim
  git clone https://github.com/gmarik/Vundle.vim "$HOME/.vim/bundle/Vundle.vim"
  # Manual.
  # TODO fails from bash pipe becuase not TTY.
  # http://stackoverflow.com/questions/23322744/vim-run-commands-from-bash-script-and-exit-without-leaving-shell-in-a-bad-state
  #vim +PluginInstall +qall

  # https://github.com/tmux-plugins/tpm
  git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm
fi

if $gui; then
  dconf load / <~/.config/dconf/user.conf

  # Python
  pip install --user --upgrade pip virtualenv

  # chinese-input
  # MANUAL settings > text entry > chinese (pinyin ibus)
  ibus restart

  # Automatically run upgrades without confirmation.
  # MANUAL accept ncurses confirmation.
  sudo dpkg-reconfigure unattended-upgrades

  sudo apt-file update
fi

if $full; then
  if $setup_home_partition; then
    # nodejs
    # https://askubuntu.com/questions/594656/how-to-install-the-latest-versions-of-nodejs-and-npm/971612#971612
    curl https://raw.githubusercontent.com/creationix/nvm/master/install.sh | sh
    source ~/.nvm/nvm.sh
    nvm install --lts
    nvm use --lts
  fi
fi
